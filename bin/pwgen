#!/usr/bin/env python3
"""
Author:         suzukaze hazuki <suzukaze.hazuki2020@gmail.com>
Filename:       pwgen
Last modified:  2018-06-13 22:54

Description:
Generate a password that's easier to type while being secure:

1. Need to have at least one lowercase character, one uppercase character,
  and one special characters.
2. Lowercase characters have a higher roll chance than digits/uppercase
  characters and punctuations.
3. It will generate 20 password so you can pick a random one.
"""
from secrets import choice, randbelow
from random import shuffle
from string import ascii_lowercase, ascii_uppercase

special_lowercase = """`1234567890-=[];',./"""
special_uppercase = '''~!@#$%^&*()_+{}:"<>?'''


def regroup(chars):
    """Regroup characters so it's easier to type."""
    lowers = [
        char for char in chars
        if char in ascii_lowercase or char in special_lowercase
    ]
    uppers = [
        char for char in chars
        if char in ascii_uppercase or char in special_uppercase
    ]
    if len(uppers) % 2:
        # pattern would be lower-upper-lower
        truncate = randbelow(len(lowers))
        return lowers[:truncate] + uppers + lowers[truncate:]
    else:
        # pattern would be upper-lower-upper
        truncate = randbelow(len(uppers))
        return uppers[:truncate] + lowers + uppers[truncate:]
    return chars


def generate_one(length):
    characters = [
        choice(ascii_lowercase),
        choice(ascii_uppercase),
        choice(special_lowercase),
        choice(special_uppercase),
    ]
    shuffle(characters)
    for i in range(length - 4):
        roll = randbelow(101)
        if roll > 95:
            # 5% chance to roll a special uppercase character
            characters.append(choice(special_uppercase))
        elif roll > 85:
            # 10% chance to add a special lowercase character
            characters.append(choice(special_lowercase))
        elif roll > 75:
            # 10% chance to add a normal uppercase character
            characters.append(choice(ascii_uppercase))
        else:
            # 75% chance to add a normal lowercase character
            characters.append(choice(ascii_lowercase))

    return "".join(regroup(characters))

def main():
    for i in range(5):
        print(*[generate_one(16) for j in range(4)], sep=" ")


if __name__ == '__main__':
    main()
